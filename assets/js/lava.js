// Generated by CoffeeScript 1.3.3

/*
Lava provides all of the lovely UI stuff
*/


/*
Global functions
*/


(function() {
  var lavaBindMethods, result, y,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  lavaBindMethods = function(methods, namespace) {
    if (namespace == null) {
      namespace = 'general';
    }
    if (methods['ready']) {
      jQuery(document).on("ready.lava." + namespace, methods['ready']);
    }
    if (methods['init']) {
      jQuery(document).on("init.lava." + namespace, methods['init']);
    }
    if (methods['defaultState']) {
      return jQuery(document).on("defaultState.lava." + namespace, methods['defaultState']);
    }
  };

  jQuery(document).ready(function() {
    return jQuery('.lava-cntr').lava();
  });

  /*
  Main methods
  */


  (function($, window, document) {
    var methods;
    methods = {};
    methods.init = function() {
      $(this).trigger("init.lava", this);
      $(this).trigger("defaultState.lava", this);
      return this;
    };
    return $.fn.extend({
      lava: function(method) {
        var args;
        if (methods[method]) {
          args = Array.prototype.slice.call(arguments, 1);
          return methods[method].apply(this, args);
        } else if (typeof method === 'object' || !method) {
          return methods.init.apply(this, arguments);
        } else {
          return debug.error('Lava call failed', method, methods);
        }
      }
    });
  })(jQuery, window, document);

  /*
  Lava navigation
  */


  (function($, window, document) {
    var methods;
    methods = {};
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        return $(this).find('.js-lava-nav').on('click.lava.lavaNav', 'li', methods.click);
      });
    };
    methods.click = function() {
      var $lavaNav, attr, identifier, targetCntr;
      $lavaNav = $(this).parents('.js-lava-nav');
      targetCntr = $lavaNav.attr('data-lava-nav-target-cntr');
      attr = $lavaNav.attr('data-lava-nav-identifier');
      identifier = $(this).attr(attr);
      $lavaNav.find('li').removeClass('active-descendant').addClass('inactive-descendant');
      $(this).removeClass('inactive-descendant').addClass('active-descendant');
      $("#" + targetCntr).find('.js-lava-nav-target').removeClass('active-descendant').addClass('inactive-descendant');
      return $("#" + targetCntr).find(".js-lava-nav-target[" + attr + "='" + identifier + "']").removeClass('inactive-descendant').addClass('active-descendant').trigger('active.lava');
    };
    return lavaBindMethods(methods, 'lavaNav');
  })(jQuery, window, document);

  /*
  Form Attribute
  */


  (function($, Modernizr) {
    var methods, namespace;
    methods = {};
    namespace = 'lavaPolyfill.lavaFormattrribute';
    Modernizr.addTest('formattribute', function() {
      var bool, div, form, id, input;
      try {
        form = document.createElement("form");
        input = document.createElement("input");
        div = document.createElement("div");
        id = "formtest";
        bool = false;
        form.id = id;
        input.setAttribute("form", id);
        div.appendChild(form);
        div.appendChild(input);
        document.documentElement.appendChild(div);
        bool = form.elements.length === 1;
        div.parentNode.removeChild(div);
        return bool;
      } catch (e) {
        return false;
      }
    });
    methods.init = function(e, lava) {
      if (!Modernizr.formattribute) {
        return $(lava).each(function() {
          $(this).find('*[type="submit"][form]').on("click.lava." + namespace, methods.submitClick);
          return $(this).find('form[id]').on("submit.lava." + namespace, methods.formSubmit);
        });
      }
    };
    methods.submitClick = function(e) {
      var $form_, id;
      e.preventDefault();
      id = $(this).attr('form');
      $form_ = $("#" + id);
      $(this).attr('data-lava-formattribute', 'yes');
      $form_.submit();
      return $(this).removeAttr('data-lava-formattribute');
    };
    methods.formSubmit = function(e) {
      var $form, id;
      e.preventDefault();
      id = $(this).attr('id');
      $form = $(this).clone().removeAttr('id');
      $("*[form='" + id + "']").each(function() {
        var $clone;
        $clone = $(this).clone().removeAttr('form');
        if ($(this).is(':checked')) {
          $clone.attr('checked', 'checked');
        } else {
          $clone.removeAttr('checked');
        }
        return $clone.appendTo($form);
      });
      $form.find('*[data-lava-formattribute="yes"]').each(function() {
        var name, value;
        value = $(this).val();
        if (value === void 0) {
          value = '';
        }
        name = $(this).attr('name');
        if (typeof name !== 'undefined') {
          return $("<input type='hidden' name='" + name + "' value='" + value + "'>").appendTo($form);
        }
      });
      $form.appendTo(document.documentElement);
      $form.submit();
      return $form.remove();
    };
    return lavaBindMethods(methods, namespace);
  })(jQuery, Modernizr);

  /*
  HTML5 history
  */


  (function($) {
    var methods;
    methods = {};
    methods.init = function(e, lava) {
      if ($('html').hasClass('history')) {
        return $(lava).each(function() {
          return $(this).find('a.js-lava-address').on('click.lava.lavaHistory', methods.click);
        });
      }
    };
    methods.click = function(e) {
      var url;
      if (window.History.enabled) {
        e.preventDefault();
        url = $(this).attr('href');
        return window.History.pushState(null, null, url);
      }
    };
    return lavaBindMethods(methods, 'lavaHistory');
  })(jQuery);

  /*
  Animations
  */


  (function($) {
    var methods;
    methods = {};
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        return $(this).find('.js-lava-animation-slide-right').on('active.lava.lavaAnimation', methods.slideRight);
      });
    };
    methods.slideRight = function() {
      return $(this).css({
        'opacity': 0,
        'position': 'relative',
        'left': '-10px'
      }).animate({
        'opacity': 1,
        'left': 0
      }, 200);
    };
    return lavaBindMethods(methods, 'lavaAnimations');
  })(jQuery);

  /*
  Scene callbacks
  */


  (function($, window, document) {
    var methods;
    methods = {};
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        var $scenes;
        $scenes = $(this).find('.lava-scene');
        $scenes.on('load.lava.lavaScene', methods.load);
        return $scenes.on('active.lava.lavaScene', methods.active);
      });
    };
    methods.defaultState = function(e, lava) {
      return $(lava).each(function() {
        var $scenes;
        $scenes = $(this).find('.lava-scene');
        $scenes.trigger('load.lava');
        return $(this).find('.lava-scene.active-descendant').trigger('active.lava');
      });
    };
    methods.load = function() {
      var $actionBlock, sceneId;
      sceneId = $(this).attr('data-scene-id');
      $actionBlock = $(".lava-actionbar-block[data-scene-id='" + sceneId + "']");
      return $(this).data('lava.scene.actionBlock', $actionBlock);
    };
    methods.active = function() {
      var $actionBar, $actionBlock;
      $actionBar = $(".lava-actionbar-cntr");
      $actionBar.find('.lava-actionbar-block').addClass('inactive-descendant').removeClass('active-descendant');
      $actionBlock = $(this).data('lava.scene.actionBlock');
      return $actionBlock.addClass('active-descendant').removeClass('inactive-descendant');
    };
    return lavaBindMethods(methods, 'lavaScene');
  })(jQuery, window, document);

  /*
  Settings Scene callbacks
  */


  (function($, window, document) {
    var methods, namespace;
    methods = {};
    namespace = 'lavaSettingsScene';
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        var $scenes;
        $scenes = $(this).find('.lava-scene.lava-settings-scene');
        return $scenes.on("load.lava." + namespace, methods.load);
      });
    };
    return lavaBindMethods(methods, namespace);
  })(jQuery, window, document);

  y = Object;

  y.x = true;

  result = false;

  if (__indexOf.call(y, 'x') >= 0) {
    result = true;
  }

  (function($, Modernizr) {
    var methods, namespace;
    methods = {};
    namespace = 'lavaPolyfill.lavaImgLabelFix';
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        return $(this).find('label img.js-lava-fix-click').on("click.lava." + namespace, methods.click);
      });
    };
    methods.click = function(e) {
      e.preventDefault();
      return $(this).parents('label').click();
    };
    return lavaBindMethods(methods, namespace);
  })(jQuery, Modernizr);

}).call(this);
