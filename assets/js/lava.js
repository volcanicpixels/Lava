// Generated by CoffeeScript 1.3.3

/*
Lava provides all of the lovely UI stuff
*/


/*
Global functions
*/


(function() {
  var lavaBindMethods;

  lavaBindMethods = function(methods, namespace) {
    if (namespace == null) {
      namespace = 'general';
    }
    if (methods['ready']) {
      jQuery(document).on("ready.lava." + namespace, methods['ready']);
    }
    if (methods['init']) {
      jQuery(document).on("init.lava." + namespace, methods['init']);
    }
    if (methods['defaultState']) {
      return jQuery(document).on("defaultState.lava." + namespace, methods['defaultState']);
    }
  };

  jQuery(document).ready(function() {
    return jQuery('.lava-cntr').lava();
  });

  /*
  Main methods
  */


  (function($, window, document) {
    var methods;
    methods = {};
    methods.init = function() {
      $(this).trigger("init.lava", this);
      $(this).trigger("defaultState.lava", this);
      return this;
    };
    return $.fn.extend({
      lava: function(method) {
        var args;
        if (methods[method]) {
          args = Array.prototype.slice.call(arguments, 1);
          return methods[method].apply(this, args);
        } else if (typeof method === 'object' || !method) {
          return methods.init.apply(this, arguments);
        } else {
          return debug.error('Lava call failed', method, methods);
        }
      }
    });
  })(jQuery, window, document);

  /*
  Lava navigation
  */


  (function($, window, document) {
    var methods;
    methods = {};
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        return $(this).find('.js-lava-nav').on('click.lava.lavaNav', 'li', methods.click);
      });
    };
    methods.click = function() {
      var $lavaNav, attr, identifier, targetCntr;
      $lavaNav = $(this).parents('.js-lava-nav');
      targetCntr = $lavaNav.attr('data-lava-nav-target-cntr');
      attr = $lavaNav.attr('data-lava-nav-identifier');
      identifier = $(this).attr(attr);
      $lavaNav.find('li').removeClass('active-descendant').addClass('inactive-descendant');
      $(this).removeClass('inactive-descendant').addClass('active-descendant');
      $("#" + targetCntr).find('.js-lava-nav-target').removeClass('active-descendant').addClass('inactive-descendant');
      return $("#" + targetCntr).find(".js-lava-nav-target[" + attr + "='" + identifier + "']").removeClass('inactive-descendant').addClass('active-descendant').trigger('active.lava');
    };
    return lavaBindMethods(methods, 'lavaNav');
  })(jQuery, window, document);

  /*
  HTML5 history
  */


  (function($) {
    var methods;
    methods = {};
    methods.init = function(e, lava) {
      if ($('html').hasClass('history')) {
        return $(lava).each(function() {
          return $(this).find('a.js-lava-address').on('click.lava.lavaHistory', methods.click);
        });
      }
    };
    methods.click = function(e) {
      var url;
      if (window.History.enabled) {
        e.preventDefault();
        url = $(this).attr('href');
        return window.History.pushState(null, null, url);
      }
    };
    return lavaBindMethods(methods, 'lavaHistory');
  })(jQuery);

  /*
  Animations
  */


  (function($) {
    var methods;
    methods = {};
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        return $(this).find('.js-lava-animation-slide-right').on('active.lava.lavaAnimation', methods.slideRight);
      });
    };
    methods.slideRight = function() {
      return $(this).css({
        'opacity': 0,
        'position': 'relative',
        'left': '-10px'
      }).animate({
        'opacity': 1,
        'left': 0
      }, 200);
    };
    return lavaBindMethods(methods, 'lavaAnimations');
  })(jQuery);

  /*
  Scene callbacks
  */


  (function($, window, document) {
    var methods;
    methods = {};
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        var $scenes;
        $scenes = $(this).find('.lava-scene');
        $scenes.on('load.lava.lavaScene', methods.load);
        return $scenes.on('active.lava.lavaScene', methods.active);
      });
    };
    methods.defaultState = function(e, lava) {
      return $(lava).each(function() {
        var $scenes;
        $scenes = $(this).find('.lava-scene');
        $scenes.trigger('load.lava');
        return $(this).find('.lava-scene.active-descendant').trigger('active.lava');
      });
    };
    methods.load = function() {
      var $actionBlock, sceneId;
      sceneId = $(this).attr('data-scene-id');
      $actionBlock = $(".lava-actionbar-block[data-scene-id='" + sceneId + "']");
      return $(this).data('lava.scene.actionBlock', $actionBlock);
    };
    methods.active = function() {
      var $actionBar, $actionBlock;
      $actionBar = $(".lava-actionbar-cntr");
      $actionBar.find('.lava-actionbar-block').addClass('inactive-descendant').removeClass('active-descendant');
      $actionBlock = $(this).data('lava.scene.actionBlock');
      return $actionBlock.addClass('active-descendant').removeClass('inactive-descendant');
    };
    return lavaBindMethods(methods, 'lavaScene');
  })(jQuery, window, document);

  /*
  Settings Scene callbacks
  */


  (function($, window, document) {
    var methods, namespace;
    methods = {};
    namespace = 'lavaSettingsScene';
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        var $scenes;
        $scenes = $(this).find('.lava-scene.lava-settings-scene');
        return $scenes.on("load.lava." + namespace, methods.load);
      });
    };
    return lavaBindMethods(methods, namespace);
  })(jQuery, window, document);

  /*
  Skins Scene callbacks
  */


  (function($, window, document) {
    var methods, namespace;
    methods = {};
    namespace = 'lavaSkinsScene';
    methods.init = function(e, lava) {
      return $(lava).each(function() {
        var $scenes;
        $scenes = $(this).find('.lava-scene.lava-skins-scene');
        return $scenes.on("load.lava." + namespace, methods.load);
      });
    };
    methods.load = function(e) {
      var $actionBlock, sceneId;
      if (!$(this).data('lava.scene.formattedSkins')) {
        $(this).data('lava.scene.formattedSkins', true);
        sceneId = $(this).attr('data-scene-id');
        return $actionBlock = $(".lava-actionbar-block[data-scene-id='" + sceneId + "']");
      }
    };
    return lavaBindMethods(methods, namespace);
  })(jQuery, window, document);

}).call(this);
